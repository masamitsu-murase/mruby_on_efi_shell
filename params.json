{"tagline":"mruby porting on EFI Shell","name":"mruby on EFI Shell","body":"### Overview\r\n\r\nThis is a [mruby](https://github.com/mruby/mruby) porting on [EFI Shell](http://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface).\r\n\r\n* You can call UEFI functions via wrapper functions of [BootService](http://wiki.phoenix.com/wiki/index.php/EFI_BOOT_SERVICES) and [RuntimeService](http://wiki.phoenix.com/wiki/index.php/EFI_RUNTIME_SERVICES).\r\n* You can define any native C structure and you can access to the members via the structure.\r\n\r\n#### Notice\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND. \r\nIt may break the system or make your PC unbootable.\r\nPlease use this software carefully.\r\n\r\n### How to use\r\n1. Download UEFI Shell from [Tiano page](http://sourceforge.net/projects/efi-shell/files/Releases/Official%20Releases/).\r\n2. Put UEFI Shell binary in your USB memory as `EFI\\BOOT\\BOOTX64.efi`.\r\n3. Download **mruby on EFI Shell** from [download page](http://sdrv.ms/Yh4bch).\r\n4. Extract it and put it in your USB memory.\r\n5. You can run mruby script as follows:  \r\n```\r\n> mruby.efi script.rb\r\n```\r\n\r\n### Samples\r\n#### Calling `ResetSystem` of Runtime Service\r\n```ruby\r\n# Shutdown\r\n# Currently, the name of constants are too long...\r\nUEFI::RuntimeService.reset_system(UEFI::RuntimeService::ResetShutdown, UEFI::Status::SUCCESS)\r\n```\r\n\r\n#### Defining and calling UEFI native protocols\r\nThis is an example of reading disk via [`EFI_DISK_IO_PROTOCOL`](http://wiki.phoenix.com/wiki/index.php/EFI_DISK_IO_PROTOCOL).\r\n\r\nYou can download entire source code from [`example/read_disk.rb`](https://github.com/masamitsu-murase/mruby_on_efi_shell/blob/master/example/read_disk.rb).\r\n```ruby\r\n# This is a part of the source code.\r\n\r\n# Any native C structure can be defined.\r\nclass DiskIoProtocol < UEFI::Protocol\r\n  # DiskIoProtocol: http://wiki.phoenix.com/wiki/index.php/EFI_DISK_IO_PROTOCOL\r\n  GUID = UEFI::Guid.new(\"CE345171-BA0B-11d2-8e4F-00a0c969723b\")\r\n\r\n  define_variable(:revision, :u64)\r\n  define_function(:read_disk, :efi_status, [:p, :u32, :u64, :u64, :p])\r\n  #...\r\nend\r\n\r\n# (snip)\r\n\r\n# Now, `handle` contains the Handle of DiskIoProtocol,\r\n# `media_id` contains ID of the disk.\r\nputs \"handle: #{handle}\"\r\nputs \"media_id: #{media_id}\"\r\n\r\n# Find DiskIoProtocol via HandleProtocol.\r\nptr = UEFI::BootService.handle_protocol(handle, DiskIoProtocol::GUID)\r\ndp = DiskIoProtocol.new(ptr)\r\n\r\nbuf = \" \" * 512  # Buffer to be filled with returned data.\r\nst = dp.read_disk(ptr, media_id, 0, buf.size, buf)\r\nif (st.success?)\r\n  print_binary_data(buf)\r\nelse\r\n  puts \"ERROR: #{st}\"\r\nend\r\n```\r\n\r\nThe result is as follows:  \r\n![Result of DiskIoProtocol](images/vmware1.png)\r\n\r\n#### Reference\r\n[T.B.D.]\r\n\r\n#### License\r\nSame as mruby, MIT License.\r\n\r\nCopyright (c) 2013 Masamitsu MURASE\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"mruby, EFI, UEFI, Shell"}